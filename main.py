from datetime import datetime
import os
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from telegram.ext import Dispatcher

# =================== CONFIG ===================
BOT_TOKEN = os.getenv("7796994967:AAFrF9Dl9eFn8EtHnbKGpXjkt2XJXBuCo6M")
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
BASE_URL = os.getenv("https://telegram-bot-2-xvs8.onrender.com")  # ‡πÄ‡∏ä‡πà‡∏ô https://your-service.onrender.com
# ==============================================

user_data = {}

app = Flask(__name__)
application = Application.builder().token(BOT_TOKEN).build()

# ====== Telegram Handlers ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üü¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô", "üî¥ ‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô"],
        ["üöª ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", "üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á"],
        ["üìã ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π:", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    text = update.message.text
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if user_id not in user_data:
        user_data[user_id] = {
            "start_time": None,
            "bathroom_time": None,
            "bathroom_msg_id": None,
            "last_action": None
        }

    data = user_data[user_id]

    if text != "üü¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô" and data["start_time"] is None:
        await update.message.reply_text("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î '‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô' ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô", reply_to_message_id=update.message.message_id)
        return

    if text == "üü¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô":
        if data["last_action"] == "üü¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô" or data["start_time"]:
            await update.message.reply_text("‚ùó ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ", reply_to_message_id=update.message.message_id)
            return
        if data["bathroom_time"]:
            await update.message.reply_text("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", reply_to_message_id=data["bathroom_msg_id"])
            return
        data["start_time"] = datetime.now()
        data["last_action"] = "üü¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô"
        await update.message.reply_text(f"‚úÖ ‡∏Ñ‡∏∏‡∏ì {user.first_name} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß {now}", reply_to_message_id=update.message.message_id)

    elif text == "üî¥ ‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô":
        if data["last_action"] == "üî¥ ‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô" or not data["start_time"]:
            await update.message.reply_text("‚ùó ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ", reply_to_message_id=update.message.message_id)
            return
        if data["bathroom_time"]:
            await update.message.reply_text("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", reply_to_message_id=data["bathroom_msg_id"])
            return
        end_time = datetime.now()
        total_duration = end_time - data["start_time"]
        if data["bathroom_time"]:
            total_duration -= (end_time - data["bathroom_time"])
        await update.message.reply_text(
            f"üìã ‡∏Ñ‡∏∏‡∏ì {user.first_name} ‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {str(total_duration).split('.')[0]}",
            reply_to_message_id=update.message.message_id
        )
        data.update(start_time=None, bathroom_time=None, bathroom_msg_id=None, last_action="üî¥ ‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô")

    elif text == "üöª ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥":
        if data["bathroom_time"]:
            await update.message.reply_text("‚ùó ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", reply_to_message_id=data["bathroom_msg_id"])
            return
        data["bathroom_time"] = datetime.now()
        sent = await update.message.reply_text(f"üöª ‡∏Ñ‡∏∏‡∏ì {user.first_name} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥ {now}", reply_to_message_id=update.message.message_id)
        data["bathroom_msg_id"] = sent.message_id
        data["last_action"] = "üöª ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥"

    elif text == "üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á":
        if not data["bathroom_time"]:
            await update.message.reply_text("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", reply_to_message_id=update.message.message_id)
            return
        back_time = datetime.now()
        bathroom_duration = back_time - data["bathroom_time"]
        await update.message.reply_text(
            f"üîô ‡∏Ñ‡∏∏‡∏ì {user.first_name} ‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {str(bathroom_duration).split('.')[0]}",
            reply_to_message_id=data["bathroom_msg_id"]
        )
        data.update(bathroom_time=None, bathroom_msg_id=None, last_action="üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á")

    elif text == "üìã ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥":
        await update.message.reply_text("üìã ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        data["last_action"] = "üìã ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"

    else:
        await update.message.reply_text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")

# ====== Add handlers ======
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# ====== Flask Routes ======
@app.route("/")
def index():
    return "ü§ñ Bot is live!"

@app.route(WEBHOOK_PATH, methods=["POST"])
async def webhook():
    if request.method == "POST":
        update = Update.de_json(request.get_json(force=True), application.bot)
        await application.process_update(update)
        return "ok"
    return "not allowed", 405

# ====== Setup Webhook ======
@app.before_first_request
def init_webhook():
    webhook_url = f"{BASE_URL}{WEBHOOK_PATH}"
    application.bot.set_webhook(webhook_url)
    print(f"‚úÖ Webhook set: {webhook_url}")

# ====== Run Flask ======
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
